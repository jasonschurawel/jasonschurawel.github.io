name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions for GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build with GitHub data
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔧 Setting up Go dependencies..."
        cd server
        go mod tidy
        cd ..
        
        echo "🧹 Cleaning up any existing processes..."
        pkill -f "go run main.go" || true
        sleep 2
        
        echo "📡 Starting Go server with GitHub authentication..."
        cd server
        echo "🔧 Server environment check:"
        echo "GITHUB_TOKEN length: ${#GITHUB_TOKEN}"
        GITHUB_TOKEN="$GITHUB_TOKEN" timeout 60s go run main.go &
        GO_PID=$!
        cd ..
        
        echo "⏳ Waiting for server to start (extended timeout)..."
        sleep 15
        
        echo "🔍 Checking server health with extended retries..."
        RETRIES=15
        while [ $RETRIES -gt 0 ]; do
          if curl -f -s http://localhost:8080/api/health > /dev/null; then
            echo "✅ Go server is responding"
            break
          fi
          echo "⏳ Waiting for server... ($RETRIES attempts left)"
          sleep 3
          RETRIES=$((RETRIES-1))
        done
        
        if [ $RETRIES -eq 0 ]; then
          echo "❌ Server failed to start after 45 seconds"
          echo "🔍 Checking if server process is running:"
          ps aux | grep "go run" || true
          echo "🔍 Checking port 8080:"
          netstat -tlpn | grep :8080 || true
          echo "🔄 Using fallback data due to server failure"
          mkdir -p public/api
          cp public/api/projects-fallback.json public/api/projects.json
        else
          echo "📊 Fetching GitHub repositories..."
          mkdir -p public/api
          if curl -f -s -w "HTTP Status: %{http_code}\n" http://localhost:8080/api/projects > public/api/projects.json; then
            echo "✅ GitHub data fetched successfully"
            # Verify JSON is valid and not empty
            if [ -s public/api/projects.json ]; then
              echo "✅ JSON file created successfully"
              echo "📊 Data preview:"
              head -c 300 public/api/projects.json  # Show first 300 chars for debugging
            else
              echo "❌ JSON file is empty, using fallback data"
              cp public/api/projects-fallback.json public/api/projects.json
            fi
          else
            echo "❌ Failed to fetch GitHub data, using fallback data"
            cp public/api/projects-fallback.json public/api/projects.json
          fi
        fi
        
        echo "🛑 Stopping Go server..."
        kill $GO_PID 2>/dev/null || true
        sleep 2
        
        echo "🔄 Building React application..."
        npm run build
        
        echo "📋 Copying GitHub data to build output..."
        mkdir -p dist/api
        cp public/api/projects.json dist/api/
        
        echo "📁 Checking build output..."
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          echo "✅ Build successful - dist directory contains files"
          ls -la dist/
          echo "📊 API data:"
          ls -la dist/api/
        else
          echo "❌ Build failed - dist directory is missing or empty"
          exit 1
        fi
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: github.ref == 'refs/heads/main'
